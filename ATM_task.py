"""
Дз "Банкомат":

Стартовые требования.
Есть банкомат:
* Словарь с купюрами вида:
    {номинал: количество, . . . }
* Ф-ция выдачи, то есть мы вызываем эту ф-цию Банкомат.ф-ия(сумма) и нам выводит словарь с купюрами равными этой сумме.
Например:
Ввели 485
Вывело {100:3, 50:3, 20:1, 10:1, 5:1}

Продвинутые требования:
Разработать алгоритм расчета оставшихся купюр так что бы в банкомате их оставалось оптимальное количество(примерно
одинаковое количество номиналов)
"""

atm_copacity = {
    '5': 50,
    '10': 60,
    '20': 55,
    '50': 53,
    '100': 3,
}
rez = {}


def count(s, kwargs):
    keys_ATM = list((int(k) for k in kwargs.keys()))
    keys_ATM.reverse()
    for i in keys_ATM:
        n = s // i
        if n <= kwargs.get(str(i)):
            rez[i] = n
            kwargs[str(i)] -= n
            s -= i * n
        else:
            n = kwargs.get(str(i))
            rez[i] = n
            kwargs[str(i)] -= n
            s -= i * n
    return rez


def withdrawal(s):
    return print(count(s, atm_copacity))


withdrawal(485)
